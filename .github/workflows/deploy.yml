name: Deploy to Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy via SSH
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ vars.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directory on server
        run: |
          ssh -i ~/.ssh/deploy_key ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} "\
            mkdir -p ${{ vars.DEPLOY_PATH }}/{data,logs,session}"

      - name: Copy application files
        run: |
          scp -i ~/.ssh/deploy_key \
            parser_daemon.py \
            requirements.txt \
            Dockerfile \
            docker-compose.yml \
            ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }}:${{ vars.DEPLOY_PATH }}/

      - name: Create .env file on server
        run: |
          ssh -i ~/.ssh/deploy_key ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} "\
            cat > ${{ vars.DEPLOY_PATH }}/.env << 'EOF'
          API_ID=${{ secrets.API_ID }}
          API_HASH=${{ secrets.API_HASH }}
          PHONE_NUMBER=${{ secrets.PHONE_NUMBER }}
          TARGET_CHANNELS=${{ vars.TARGET_CHANNELS }}
          INITIAL_FETCH_LIMIT=${{ vars.INITIAL_FETCH_LIMIT }}
          BACKFILL_LIMIT=${{ vars.BACKFILL_LIMIT }}
          EOF
          "

      - name: Deploy with Docker Compose
        run: |
          ssh -i ~/.ssh/deploy_key ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} "\
            cd ${{ vars.DEPLOY_PATH }} && \
            docker compose down && \
            docker compose build && \
            docker compose up -d"

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} "\
            cd ${{ vars.DEPLOY_PATH }} && \
            docker compose ps && \
            docker compose logs --tail=50"

      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/deploy_key
